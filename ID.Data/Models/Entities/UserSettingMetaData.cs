//-----------------
// <auto-generated>
//-----------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity.Spatial;
using System.IO;
using System.Xml.Serialization;
using Intellidesk.AcadNet.Data.Models.Entities;
using Intellidesk.AcadNet.Data.Repositories.EF6;
using Intellidesk.AcadNet.Data.Repositories.EF6;
using Intellidesk.Infrastructure;
using Intellidesk.NetTools;

namespace Intellidesk.AcadNet.Data.Models
{
    [MetadataType(typeof(UserSettingMetaData))]
    public partial class UserSetting : BaseEntity
    {
        public new UserSetting GetDataDemo()
        {
            return new UserSetting()
            {
                ConfigSetName = "Default",
                ChainDistance = (float)2.00,
                ColorIndex = 191,
                Drive = "C:\\",
                UserSettingId = 0,
                IsActive = true,
                IsColorMode = false,
                LayoutExplorerPGridColumnSplitterPosition = 40,
                LayoutExplorerRowSplitterPosition = 140,
                Percent = 0,
                ProjectStatus = "New",
                DateStarted = DateTime.Now,
                ToggleLayoutDataTemplateSelector = 0,
                UserId = 0,
                MinWidth = 300
            };
        }
        public static UserSetting Load(string filename = "")
        {
            UserSetting ret;
            var ProjectManager = PluginBootstrapper.PluginContainer.Resolve(typeof(IPluginManager), "", null) as IPluginManager;

            if (filename != "")
                ProjectManager.UserSettingsFileName = filename;

            try
            {
                var xs = new XmlSerializer(typeof(UserSetting));
                var sr = new StreamReader(ProjectManager.RootPath + ProjectManager.UserSettingsFileName);
                ret = (UserSetting)xs.Deserialize(sr);
                sr.Close();
            }
            catch
            {
                var userSetting = new UserSetting();
                try
                {
                    var xs = new XmlSerializer(typeof(UserSetting));
                    var sw = new StreamWriter(ProjectManager.RootPath + ProjectManager.UserSettingsFileName, false);
                    xs.Serialize(sw, userSetting);
                    sw.Close();
                }
                catch
                { }
                return userSetting;
            }
            return ret;
        }

        /// <summary> Save will be called on a specific instance </summary>
        public void Save(string path)
        {
            try
            {
                var xs = new XmlSerializer(typeof(UserSettingMetaData));
                var sw = new StreamWriter(path, false); //ProjectManager.RootPath + ProjectManager.UserSettingsFileName
                xs.Serialize(sw, this);
                sw.Close();
            }
            catch (Exception ex)
            {
                //var ed = Application.DocumentManager.MdiActiveDocument.Editor; !!!!!!!!!!!
                //ed.WriteMessage("\nUnable to save the application settings: {0}", ex);
            }
        }
    }

    public enum ProjectStatus
    {
        Continue,
        Debug,
        Locked,
        New
    }
    /// <summary> Application settings </summary>
    [Serializable(), DefaultProperty("Id")]
    public class UserSettingMetaData : BaseEntity
    {
        public int UserSettingId { get; set; }

        [Description("ConfigSet name"), Category("Identity")]
        public string ConfigSetName { get; set; }

        [Description("Distance between basic drawing elements"), Category("Identity")]
        public double ChainDistance { get; set; }

        [Description("Color Brush"), Category("Identity"), DefaultValue(191)]
        public int ColorIndex { get; set; }

        [Description("The day this work was started"), Category("Identity")]
        public DateTime DateStarted { get; set; }

        [Description("Drive"), Category("Identity")]
        public string Drive { get; set; }

        [Description("Is Active"), Category("Identity")]
        public bool IsActive { get; set; }

        [Description("Is Drawing color mode"), Category("Identity")]
        public bool IsColorMode { get; set; }

        [Description("Layout Explorer Row Splitter Position"), Category("Identity")]
        public short LayoutExplorerRowSplitterPosition { get; set; }

        [Description("Layout Explorer Column Splitter Position"), Category("Identity")]
        public short LayoutExplorerPGridColumnSplitterPosition { get; set; }

        [Description("Percent"), Category("Identity")]
        public short Percent { get; set; }

        [Description("Project status"), Category("Identity")]
        public ProjectStatus ProjectStatus { get; set; }

        [Description("Toggle Layout DataTemplate Selector"), Category("Identity")]
        public short ToggleLayoutDataTemplateSelector { get; set; }

        [Description("The user's name"), Category("Identity")]
        public string User { get; set; }

        [Description("MinWidth"), Category("Identity")]
        public int MinWidth { get; set; }

        /// <summary> Save will be called on a specific instance </summary>
        public void Save(string path)
        {
            try
            {
                var xs = new XmlSerializer(typeof(UserSetting));
                var sw = new StreamWriter(path, false); //ProjectManager.RootPath + ProjectManager.UserSettingsFileName
                xs.Serialize(sw, this);
                sw.Close();
            }
            catch (Exception ex)
            {
                //var ed = Application.DocumentManager.MdiActiveDocument.Editor; //!!!!!!!!
                //ed.WriteMessage("\nUnable to save the application settings: {0}", ex);
            }
        }
    }
}